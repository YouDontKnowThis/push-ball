{"version":3,"sources":["Ball.jsx","App.js","serviceWorker.js","index.js"],"names":["Ball","state","width","animate","onPushHandler","setState","onPullHandler","prevState","onRemoveAnimate","onCancelHandler","setTimeout","disabled","this","barColor","className","style","backgroundColor","onClick","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0OAiGeA,G,kNA7FbC,MAAQ,CACNC,MAAO,IACPC,SAAS,G,EAGXC,cAAgB,WACd,EAAKC,SAAS,CAAEH,MAAO,O,EAGzBI,cAAgB,WACd,EAAKD,UAAS,SAACE,GACb,MAAO,CACLL,MAAOK,EAAUL,MAAQ,GACzBC,SAAS,MAIb,EAAKK,mB,EAGPC,gBAAkB,WAChB,EAAKJ,UAAS,SAACE,GACb,MAAO,CACLL,MAAOK,EAAUL,MAAQ,GACzBC,SAAS,MAIb,EAAKK,mB,EAGPA,gBAAkB,WAChBE,YAAW,WACT,EAAKL,SAAS,CAAEF,SAAS,MACxB,M,uDAIH,IAAIQ,GAAW,EACU,IAArBC,KAAKX,MAAMC,QACbS,GAAW,GAGb,IAAIE,EAAW,OAQf,OAPID,KAAKX,MAAMC,OAAS,KACtBW,EAAW,UAETD,KAAKX,MAAMC,OAAS,KACtBW,EAAW,OAIX,yBAAKC,UAAU,QACb,yBAAKA,UAAU,cACb,yBACEA,UACEF,KAAKX,MAAME,QAAU,sBAAwB,gBAGjD,yBAAKW,UAAU,aACb,yBACEC,MAAO,CACLb,MAAM,GAAD,OAAKU,KAAKX,MAAMC,MAAhB,KACLc,gBAAiBH,GAEnBC,UAAU,uBAGd,yBAAKA,UAAU,iBACb,4BACEG,QAASL,KAAKH,gBACdK,UAAU,OACVH,SAAUA,GAHZ,QAOA,4BACEM,QAASL,KAAKR,cACdU,UAAU,OACVH,UAAWA,GAHb,QAOA,4BAAQM,QAASL,KAAKN,cAAeQ,UAAU,QAA/C,e,GApFOI,cCQJC,MARf,WACE,OACE,6BACE,kBAAC,EAAD,QCMcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.4f336057.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./Ball.css\";\n\nclass Ball extends Component {\n  state = {\n    width: 100,\n    animate: false,\n  };\n\n  onPushHandler = () => {\n    this.setState({ width: 100 });\n  };\n\n  onPullHandler = () => {\n    this.setState((prevState) => {\n      return {\n        width: prevState.width + 10,\n        animate: true,\n      };\n    });\n\n    this.onRemoveAnimate();\n  };\n\n  onCancelHandler = () => {\n    this.setState((prevState) => {\n      return {\n        width: prevState.width - 10,\n        animate: true,\n      };\n    });\n\n    this.onRemoveAnimate();\n  };\n\n  onRemoveAnimate = () => {\n    setTimeout(() => {\n      this.setState({ animate: false });\n    }, 500);\n  };\n\n  render() {\n    let disabled = false;\n    if (this.state.width === 0) {\n      disabled = true;\n    }\n\n    let barColor = \"#eee\";\n    if (this.state.width <= 60) {\n      barColor = \"orange\";\n    }\n    if (this.state.width <= 30) {\n      barColor = \"red\";\n    }\n\n    return (\n      <div className=\"ball\">\n        <div className=\"ball__body\">\n          <div\n            className={\n              this.state.animate ? \"ball__style animate\" : \"ball__style\"\n            }\n          ></div>\n          <div className=\"ball__bar\">\n            <div\n              style={{\n                width: `${this.state.width}%`,\n                backgroundColor: barColor,\n              }}\n              className=\"ball__barProgress\"\n            ></div>\n          </div>\n          <div className=\"ball__control\">\n            <button\n              onClick={this.onCancelHandler}\n              className=\"push\"\n              disabled={disabled}\n            >\n              Push\n            </button>\n            <button\n              onClick={this.onPushHandler}\n              className=\"full\"\n              disabled={!disabled}\n            >\n              Full\n            </button>\n            <button onClick={this.onPullHandler} className=\"pull\">\n              Pull\n            </button>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Ball;\n","import React from \"react\";\nimport Ball from \"./Ball\";\n\nfunction App() {\n  return (\n    <div>\n      <Ball />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}